<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oliver Schwartz</title>
    <link>http://oliverschwartz.github.io/</link>
    <description>Recent content on Oliver Schwartz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 03 Jan 2025 16:39:29 +1100</lastBuildDate><atom:link href="http://oliverschwartz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Structure and interpretation of computer programs (SICP)</title>
      <link>http://oliverschwartz.github.io/posts/sicp/</link>
      <pubDate>Fri, 03 Jan 2025 16:39:29 +1100</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/sicp/</guid>
      <description>First scheme: computing square roots with Newton&amp;rsquo;s method    ( define (good-enough? guess x) (&amp;lt; (abs (- (square guess) x)) 0.001)) ( define (average x y) (/ (+ x y) 2)) ( define (improve guess x) (average guess (/ x guess))) ( define (sqrt-iter guess x) (if (good-enough? guess x) guess (sqrt-iter (improve guess x) x))) ; Or we can use block structure... (define (sqrt x) (define (returns-one x) 1) (sqrt-iter (returns-one 500) x)) </description>
    </item>
    
    <item>
      <title>Reading in 2025</title>
      <link>http://oliverschwartz.github.io/posts/reading_2025/</link>
      <pubDate>Sat, 28 Dec 2024 17:24:54 +1100</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/reading_2025/</guid>
      <description>This post maps out all of my book reading for the year of 2025. This is part of my general attempt to reduce my consumption of short-form media (podcasts, news articles, youtube videos) that I&amp;rsquo;m convinced is eroding my attention span.
Rules: books on the list are either NS (not started), IP (in progress) or C (complete).
Technical     The MINIX book (operating systems design and implementation) [IP]  Non technical     SPQR (Mary Beard) [IP] Hry o zivot (Suzanne Collins) [IP] Narnie (lev, satnik, a carodenica) (CS Lewis) [IP] Murderbot Diaries [NS] How to take smart notes [NS]  Fictional     Do androids dream of electric sheep?</description>
    </item>
    
    <item>
      <title>Year of Slovak</title>
      <link>http://oliverschwartz.github.io/posts/year_of_slovak/</link>
      <pubDate>Fri, 22 Nov 2024 14:25:13 +0100</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/year_of_slovak/</guid>
      <description>After putting 6 months of consistent (daily) effort into learning Dutch, I&amp;rsquo;ve decided to focus my attention on Slovak. Through learning Dutch, I have learned an incredible amount about how I can teach myself a language (as well as the Dutch itself, of course). My objective is to study 60 minutes every day for a year, and to assess myself along the way. I intend this post to serve as documentation for my progression.</description>
    </item>
    
    <item>
      <title>Learning Dutch</title>
      <link>http://oliverschwartz.github.io/posts/learning_dutch/</link>
      <pubDate>Wed, 30 Oct 2024 14:09:25 +0100</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/learning_dutch/</guid>
      <description>I&amp;rsquo;ll begin with some important information. I live in the Netherlands. As a result, I&amp;rsquo;ve been trying to learn Dutch. Learning a foreign language is a very interesting and rewarding experience which I highly recommend to others. To that end, the objective of this post is to collate some concrete ideas and practices to help motivated language students.
The &amp;lsquo;meta&amp;rsquo; stuff    How should one think about learning a foreign language?</description>
    </item>
    
    <item>
      <title>Snake in Haskell</title>
      <link>http://oliverschwartz.github.io/posts/snake/</link>
      <pubDate>Wed, 25 Aug 2021 16:10:57 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/snake/</guid>
      <description>I&amp;rsquo;ve been reading a book written by Chris Allen on Haskell - Haskell Programming from First Principles. This is a fantastic book that I would recommend to anyone interested in functional programming. More and more I am learning to appreciate how wonderful functional programming can be. Strict typing makes a lot of simple bugs evaporate. The module structure of Haskell is also simple. Typeclasses are a far more elegant way of specifying behaviour than the convolutions of Java&amp;rsquo;s interfaces (at least, I find them more intuitive).</description>
    </item>
    
    <item>
      <title>Properties of options</title>
      <link>http://oliverschwartz.github.io/posts/no-arb/</link>
      <pubDate>Sun, 30 May 2021 19:46:57 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/no-arb/</guid>
      <description>Recently, I&amp;rsquo;ve been reading about mathematical finance and all the interesting problems therein. In doing so, I some interesting albeit simple framings of option properties.
Options    An option is a derivative product which gives the holder the option (but not the obligation) to purchase some asset at a fixed price on a fixed date. (This is a European option - American options allow you to exercise the option on any preceding day.</description>
    </item>
    
    <item>
      <title>Memoryless distributions in practice</title>
      <link>http://oliverschwartz.github.io/posts/teller/</link>
      <pubDate>Tue, 25 May 2021 11:10:00 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/teller/</guid>
      <description>I came across this probability problem in an MIT course and I thought the solution was a good illustration of the memoryless property of some distributions.
The problem: Suppose you are at a bank. You find that all three tellers are busy serving other customers, and there are no other customers in the queue. Assume that the service times for you and for each of the customers being served are i.</description>
    </item>
    
    <item>
      <title>A puzzle involving inverses</title>
      <link>http://oliverschwartz.github.io/posts/exp-puzzle/</link>
      <pubDate>Tue, 25 May 2021 10:16:00 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/exp-puzzle/</guid>
      <description>Suppose we have the following two functions:
 $y = a^x$ $x = a^y$  You are told that there is one intersection point. Find this intersection point and the corresponding value of $a$.
Let&amp;rsquo;s begin by rearranging the second function to get it in terms of $y$: $$ y = \log_a x = \frac{\ln x}{\ln a} $$
Let&amp;rsquo;s define another function, $f(x)$, do be the difference between these two functions: $ f(x) = a^x - \frac{\ln x}{\ln a}.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://oliverschwartz.github.io/contact/</link>
      <pubDate>Thu, 13 May 2021 20:07:29 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/contact/</guid>
      <description>Feel free to email me at oliver(dot)p(dot)schwartz(at)gmail(dot)com</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://oliverschwartz.github.io/projects/</link>
      <pubDate>Thu, 13 May 2021 20:07:05 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/projects/</guid>
      <description>Multidimensional cointegration: signal generation and analysis on Eurodollar futures. Paper. Going Viral: A virally themed game built with Three.js and Cannon.js. Play here Prediction engine for the NBA All-Star fan vote: Ball-game, or social media game? Repository and white paper. Facial generation with CelebA data set: pattern searching in data. Code. Logistic regression on an artificial data set: predicting the tastiness of papayas. Code. Optimal stopping problem: derivation and simulation.</description>
    </item>
    
    <item>
      <title>The maiden post: the singular value decomposition</title>
      <link>http://oliverschwartz.github.io/posts/svd/</link>
      <pubDate>Thu, 13 May 2021 19:56:57 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/posts/svd/</guid>
      <description>Singular value decomposition    Singular value decomposition (SVD) is perhaps the most interesting and fundamental theorem of linear algebra. Generally speaking, it says that any matrix can be factored into the product of three matrices with specific properties, one of which is a diagonal matrix. (In this post we will just assume our matrices are real-valued).
Specifically, the SVD of a real matrix $A \in \mathbb{R}^{m \times n}$ can be written as the product of three matrices $U$, $\Sigma$, $V^T.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://oliverschwartz.github.io/about/</link>
      <pubDate>Thu, 13 May 2021 19:50:16 +1000</pubDate>
      
      <guid>http://oliverschwartz.github.io/about/</guid>
      <description>I am a software engineer and problem solver from Sydney, Australia.
As an undergrad, I studied at Princeton University, majoring in computer science. I also rowed on the men&amp;rsquo;s heavyweight crew team. At Princeton, I won the Shapiro prize for academic excellence and the 1916 cup for the varsity athlete with highest academic standing. I was the president of Tau Beta Pi (the engineering honor society) and graduated Summa Cum Laude (3.</description>
    </item>
    
  </channel>
</rss>
